public class MergeSort {
    public class Node{
        int data;
        Node next;

      public Node(int data){
            this.data = data;
            this.next = null;
       }
    }
        static Node head;
        static Node tail;

        public void addFirst(int data){
            Node newNode = new Node(data);
            if(head == null){
                head=tail=newNode;
                return;
            }
            newNode.next = head;
            head = newNode;


        }

        public void print(){
            Node temp = head;
            while(temp != null){
                System.out.print(temp.data + " -> ");
                temp = temp.next;
            }
            System.out.println("null");
        }

        //find mid
        public Node getmid(Node head){
            Node slow = head;
            Node fast = head.next;

            while(fast != null && fast.next != null){
                slow = slow.next;
                fast = fast.next.next;
            }
            return slow;
        }

        public Node merge(Node head1, Node head2){
        
            Node dummy = new Node(-1);
            Node temp = dummy;

            while(head1 != null && head2 != null){
                if(head1.data <= head2.data){
                    temp.next = head1;
                    head1 = head1.next;
                    temp = temp.next;
                }
                else{
                    temp.next = head2;
                    head2 = head2.next;
                    temp = temp.next;
                }
            }
            while(head1 != null){
                temp.next = head1;
                head1 = head1.next;
                temp = temp.next;
            }
            while(head2 != null){
                temp.next = head2;
                head2 = head2.next;
                temp = temp.next;
            }
            return dummy.next;

        }

        public Node mergesort(Node head){
            if(head == null || head.next == null){
                return head;
            }
            //find mid
            Node mid = getmid(head);
            Node left = head;
            Node rightHead = mid.next;
            mid.next = null;

            Node newleft = mergesort(head);
            Node newright = mergesort(rightHead);
            
            return merge(newleft,newright);

        }

        

        public static void main(String[] args) {
            
            MergeSort ll = new MergeSort();
            ll.addFirst(0);
            ll.addFirst(1);
            ll.addFirst(2);
            ll.addFirst(3);
            ll.addFirst(4);
            ll.addFirst(5);
            ll.addFirst(6);

            ll.print();
           ll.head = ll.mergesort(ll.head);
            ll.print();

        }
}
